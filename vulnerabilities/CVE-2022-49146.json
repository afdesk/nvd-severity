{
  "Description": "In the Linux kernel, the following vulnerability has been resolved:\n\nvirtio: use virtio_device_ready() in virtio_device_restore()\n\nAfter waking up a suspended VM, the kernel prints the following trace\nfor virtio drivers which do not directly call virtio_device_ready() in\nthe .restore:\n\n    PM: suspend exit\n    irq 22: nobody cared (try booting with the \"irqpoll\" option)\n    Call Trace:\n     <IRQ>\n     dump_stack_lvl+0x38/0x49\n     dump_stack+0x10/0x12\n     __report_bad_irq+0x3a/0xaf\n     note_interrupt.cold+0xb/0x60\n     handle_irq_event+0x71/0x80\n     handle_fasteoi_irq+0x95/0x1e0\n     __common_interrupt+0x6b/0x110\n     common_interrupt+0x63/0xe0\n     asm_common_interrupt+0x1e/0x40\n     ? __do_softirq+0x75/0x2f3\n     irq_exit_rcu+0x93/0xe0\n     sysvec_apic_timer_interrupt+0xac/0xd0\n     </IRQ>\n     <TASK>\n     asm_sysvec_apic_timer_interrupt+0x12/0x20\n     arch_cpu_idle+0x12/0x20\n     default_idle_call+0x39/0xf0\n     do_idle+0x1b5/0x210\n     cpu_startup_entry+0x20/0x30\n     start_secondary+0xf3/0x100\n     secondary_startup_64_no_verify+0xc3/0xcb\n     </TASK>\n    handlers:\n    [<000000008f9bac49>] vp_interrupt\n    [<000000008f9bac49>] vp_interrupt\n    Disabling IRQ #22\n\nThis happens because we don't invoke .enable_cbs callback in\nvirtio_device_restore(). That callback is used by some transports\n(e.g. virtio-pci) to enable interrupts.\n\nLet's fix it, by calling virtio_device_ready() as we do in\nvirtio_dev_probe(). This function calls .enable_cts callback and sets\nDRIVER_OK status bit.\n\nThis fix also avoids setting DRIVER_OK twice for those drivers that\ncall virtio_device_ready() in the .restore.",
  "Severity": "MEDIUM",
  "Score": 5.5,
  "Cvss_v31_vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H"
}