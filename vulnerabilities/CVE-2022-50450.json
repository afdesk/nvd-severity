{
  "Description": "In the Linux kernel, the following vulnerability has been resolved:\n\nlibbpf: Use elf_getshdrnum() instead of e_shnum\n\nThis commit replace e_shnum with the elf_getshdrnum() helper to fix two\noss-fuzz-reported heap-buffer overflow in __bpf_object__open. Both\nreports are incorrectly marked as fixed and while still being\nreproducible in the latest libbpf.\n\n  # clusterfuzz-testcase-minimized-bpf-object-fuzzer-5747922482888704\n  libbpf: loading object 'fuzz-object' from buffer\n  libbpf: sec_cnt is 0\n  libbpf: elf: section(1) .data, size 0, link 538976288, flags 2020202020202020, type=2\n  libbpf: elf: section(2) .data, size 32, link 538976288, flags 202020202020ff20, type=1\n  =================================================================\n  ==13==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x6020000000c0 at pc 0x0000005a7b46 bp 0x7ffd12214af0 sp 0x7ffd12214ae8\n  WRITE of size 4 at 0x6020000000c0 thread T0\n  SCARINESS: 46 (4-byte-write-heap-buffer-overflow-far-from-bounds)\n      #0 0x5a7b45 in bpf_object__elf_collect /src/libbpf/src/libbpf.c:3414:24\n      #1 0x5733c0 in bpf_object_open /src/libbpf/src/libbpf.c:7223:16\n      #2 0x5739fd in bpf_object__open_mem /src/libbpf/src/libbpf.c:7263:20\n      ...\n\nThe issue lie in libbpf's direct use of e_shnum field in ELF header as\nthe section header count. Where as libelf implemented an extra logic\nthat, when e_shnum == 0 && e_shoff != 0, will use sh_size member of the\ninitial section header as the real section header count (part of ELF\nspec to accommodate situation where section header counter is larger\nthan SHN_LORESERVE).\n\nThe above inconsistency lead to libbpf writing into a zero-entry calloc\narea. So intead of using e_shnum directly, use the elf_getshdrnum()\nhelper provided by libelf to retrieve the section header counter into\nsec_cnt.",
  "Severity": "UNKNOWN",
  "Score": 0.0
}