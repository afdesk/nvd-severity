{
  "Description": "In the Linux kernel, the following vulnerability has been resolved:\n\nRDMA/core: Fix ib block iterator counter overflow\n\nWhen registering a new DMA MR after selecting the best aligned page size\nfor it, we iterate over the given sglist to split each entry to smaller,\naligned to the selected page size, DMA blocks.\n\nIn given circumstances where the sg entry and page size fit certain\nsizes and the sg entry is not aligned to the selected page size, the\ntotal size of the aligned pages we need to cover the sg entry is >= 4GB.\nUnder this circumstances, while iterating page aligned blocks, the\ncounter responsible for counting how much we advanced from the start of\nthe sg entry is overflowed because its type is u32 and we pass 4GB in\nsize. This can lead to an infinite loop inside the iterator function\nbecause the overflow prevents the counter to be larger\nthan the size of the sg entry.\n\nFix the presented problem by changing the advancement condition to\neliminate overflow.\n\nBacktrace:\n[  192.374329] efa_reg_user_mr_dmabuf\n[  192.376783] efa_register_mr\n[  192.382579] pgsz_bitmap 0xfffff000 rounddown 0x80000000\n[  192.386423] pg_sz [0x80000000] umem_length[0xc0000000]\n[  192.392657] start 0x0 length 0xc0000000 params.page_shift 31 params.page_num 3\n[  192.399559] hp_cnt[3], pages_in_hp[524288]\n[  192.403690] umem->sgt_append.sgt.nents[1]\n[  192.407905] number entries: [1], pg_bit: [31]\n[  192.411397] biter->__sg_nents [1] biter->__sg [0000000008b0c5d8]\n[  192.415601] biter->__sg_advance [665837568] sg_dma_len[3221225472]\n[  192.419823] biter->__sg_nents [1] biter->__sg [0000000008b0c5d8]\n[  192.423976] biter->__sg_advance [2813321216] sg_dma_len[3221225472]\n[  192.428243] biter->__sg_nents [1] biter->__sg [0000000008b0c5d8]\n[  192.432397] biter->__sg_advance [665837568] sg_dma_len[3221225472]",
  "Severity": "MEDIUM",
  "Score": 5.5,
  "Cvss_v31_vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H"
}