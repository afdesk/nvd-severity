{
  "Description": "In the Linux kernel, the following vulnerability has been resolved:\n\nnetfilter: x_tables: fix percpu counter block leak on error path when creating new netns\n\nHere is the stack where we allocate percpu counter block:\n\n  +-< __alloc_percpu\n    +-< xt_percpu_counter_alloc\n      +-< find_check_entry # {arp,ip,ip6}_tables.c\n        +-< translate_table\n\nAnd it can be leaked on this code path:\n\n  +-> ip6t_register_table\n    +-> translate_table # allocates percpu counter block\n    +-> xt_register_table # fails\n\nthere is no freeing of the counter block on xt_register_table fail.\nNote: xt_percpu_counter_free should be called to free it like we do in\ndo_replace through cleanup_entry helper (or in __ip6t_unregister_table).\n\nProbability of hitting this error path is low AFAICS (xt_register_table\ncan only return ENOMEM here, as it is not replacing anything, as we are\ncreating new netns, and it is hard to imagine that all previous\nallocations succeeded and after that one in xt_register_table failed).\nBut it's worth fixing even the rare leak.",
  "Severity": "UNKNOWN",
  "Score": 0.0
}