{
  "Description": "In the Linux kernel, the following vulnerability has been resolved:\n\ncgroup,freezer: hold cpu_hotplug_lock before freezer_mutex\n\nsyzbot is reporting circular locking dependency between cpu_hotplug_lock\nand freezer_mutex, for commit f5d39b020809 (\"freezer,sched: Rewrite core\nfreezer logic\") replaced atomic_inc() in freezer_apply_state() with\nstatic_branch_inc() which holds cpu_hotplug_lock.\n\ncpu_hotplug_lock => cgroup_threadgroup_rwsem => freezer_mutex\n\n  cgroup_file_write() {\n    cgroup_procs_write() {\n      __cgroup_procs_write() {\n        cgroup_procs_write_start() {\n          cgroup_attach_lock() {\n            cpus_read_lock() {\n              percpu_down_read(&cpu_hotplug_lock);\n            }\n            percpu_down_write(&cgroup_threadgroup_rwsem);\n          }\n        }\n        cgroup_attach_task() {\n          cgroup_migrate() {\n            cgroup_migrate_execute() {\n              freezer_attach() {\n                mutex_lock(&freezer_mutex);\n                (...snipped...)\n              }\n            }\n          }\n        }\n        (...snipped...)\n      }\n    }\n  }\n\nfreezer_mutex => cpu_hotplug_lock\n\n  cgroup_file_write() {\n    freezer_write() {\n      freezer_change_state() {\n        mutex_lock(&freezer_mutex);\n        freezer_apply_state() {\n          static_branch_inc(&freezer_active) {\n            static_key_slow_inc() {\n              cpus_read_lock();\n              static_key_slow_inc_cpuslocked();\n              cpus_read_unlock();\n            }\n          }\n        }\n        mutex_unlock(&freezer_mutex);\n      }\n    }\n  }\n\nSwap locking order by moving cpus_read_lock() in freezer_apply_state()\nto before mutex_lock(&freezer_mutex) in freezer_change_state().",
  "Severity": "UNKNOWN",
  "Score": 0.0
}