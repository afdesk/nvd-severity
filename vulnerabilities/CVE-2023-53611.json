{
  "Description": "In the Linux kernel, the following vulnerability has been resolved:\n\nipmi_si: fix a memleak in try_smi_init()\n\nKmemleak reported the following leak info in try_smi_init():\n\nunreferenced object 0xffff00018ecf9400 (size 1024):\n  comm \"modprobe\", pid 2707763, jiffies 4300851415 (age 773.308s)\n  backtrace:\n    [<000000004ca5b312>] __kmalloc+0x4b8/0x7b0\n    [<00000000953b1072>] try_smi_init+0x148/0x5dc [ipmi_si]\n    [<000000006460d325>] 0xffff800081b10148\n    [<0000000039206ea5>] do_one_initcall+0x64/0x2a4\n    [<00000000601399ce>] do_init_module+0x50/0x300\n    [<000000003c12ba3c>] load_module+0x7a8/0x9e0\n    [<00000000c246fffe>] __se_sys_init_module+0x104/0x180\n    [<00000000eea99093>] __arm64_sys_init_module+0x24/0x30\n    [<0000000021b1ef87>] el0_svc_common.constprop.0+0x94/0x250\n    [<0000000070f4f8b7>] do_el0_svc+0x48/0xe0\n    [<000000005a05337f>] el0_svc+0x24/0x3c\n    [<000000005eb248d6>] el0_sync_handler+0x160/0x164\n    [<0000000030a59039>] el0_sync+0x160/0x180\n\nThe problem was that when an error occurred before handlers registration\nand after allocating `new_smi->si_sm`, the variable wouldn't be freed in\nthe error handling afterwards since `shutdown_smi()` hadn't been\nregistered yet. Fix it by adding a `kfree()` in the error handling path\nin `try_smi_init()`.",
  "Severity": "UNKNOWN",
  "Score": 0.0
}