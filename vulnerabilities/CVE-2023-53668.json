{
  "Description": "In the Linux kernel, the following vulnerability has been resolved:\n\nring-buffer: Fix deadloop issue on reading trace_pipe\n\nSoft lockup occurs when reading file 'trace_pipe':\n\n  watchdog: BUG: soft lockup - CPU#6 stuck for 22s! [cat:4488]\n  [...]\n  RIP: 0010:ring_buffer_empty_cpu+0xed/0x170\n  RSP: 0018:ffff88810dd6fc48 EFLAGS: 00000246\n  RAX: 0000000000000000 RBX: 0000000000000246 RCX: ffffffff93d1aaeb\n  RDX: ffff88810a280040 RSI: 0000000000000008 RDI: ffff88811164b218\n  RBP: ffff88811164b218 R08: 0000000000000000 R09: ffff88815156600f\n  R10: ffffed102a2acc01 R11: 0000000000000001 R12: 0000000051651901\n  R13: 0000000000000000 R14: ffff888115e49500 R15: 0000000000000000\n  [...]\n  CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033\n  CR2: 00007f8d853c2000 CR3: 000000010dcd8000 CR4: 00000000000006e0\n  DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000\n  DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400\n  Call Trace:\n   __find_next_entry+0x1a8/0x4b0\n   ? peek_next_entry+0x250/0x250\n   ? down_write+0xa5/0x120\n   ? down_write_killable+0x130/0x130\n   trace_find_next_entry_inc+0x3b/0x1d0\n   tracing_read_pipe+0x423/0xae0\n   ? tracing_splice_read_pipe+0xcb0/0xcb0\n   vfs_read+0x16b/0x490\n   ksys_read+0x105/0x210\n   ? __ia32_sys_pwrite64+0x200/0x200\n   ? switch_fpu_return+0x108/0x220\n   do_syscall_64+0x33/0x40\n   entry_SYSCALL_64_after_hwframe+0x61/0xc6\n\nThrough the vmcore, I found it's because in tracing_read_pipe(),\nring_buffer_empty_cpu() found some buffer is not empty but then it\ncannot read anything due to \"rb_num_of_entries() == 0\" always true,\nThen it infinitely loop the procedure due to user buffer not been\nfilled, see following code path:\n\n  tracing_read_pipe() {\n    ... ...\n    waitagain:\n      tracing_wait_pipe() // 1. find non-empty buffer here\n      trace_find_next_entry_inc()  // 2. loop here try to find an entry\n        __find_next_entry()\n          ring_buffer_empty_cpu();  // 3. find non-empty buffer\n          peek_next_entry()  // 4. but peek always return NULL\n            ring_buffer_peek()\n              rb_buffer_peek()\n                rb_get_reader_page()\n                  // 5. because rb_num_of_entries() == 0 always true here\n                  //    then return NULL\n      // 6. user buffer not been filled so goto 'waitgain'\n      //    and eventually leads to an deadloop in kernel!!!\n  }\n\nBy some analyzing, I found that when resetting ringbuffer, the 'entries'\nof its pages are not all cleared (see rb_reset_cpu()). Then when reducing\nthe ringbuffer, and if some reduced pages exist dirty 'entries' data, they\nwill be added into 'cpu_buffer->overrun' (see rb_remove_pages()), which\ncause wrong 'overrun' count and eventually cause the deadloop issue.\n\nTo fix it, we need to clear every pages in rb_reset_cpu().",
  "Severity": "UNKNOWN",
  "Score": 0.0
}