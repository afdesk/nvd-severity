{
  "Description": "In the Linux kernel, the following vulnerability has been resolved:\n\nEDAC/skx_common: Fix general protection fault\n\nAfter loading i10nm_edac (which automatically loads skx_edac_common), if\nunload only i10nm_edac, then reload it and perform error injection testing,\na general protection fault may occur:\n\n  mce: [Hardware Error]: Machine check events logged\n  Oops: general protection fault ...\n  ...\n  Workqueue: events mce_gen_pool_process\n  RIP: 0010:string+0x53/0xe0\n  ...\n  Call Trace:\n  <TASK>\n  ? die_addr+0x37/0x90\n  ? exc_general_protection+0x1e7/0x3f0\n  ? asm_exc_general_protection+0x26/0x30\n  ? string+0x53/0xe0\n  vsnprintf+0x23e/0x4c0\n  snprintf+0x4d/0x70\n  skx_adxl_decode+0x16a/0x330 [skx_edac_common]\n  skx_mce_check_error.part.0+0xf8/0x220 [skx_edac_common]\n  skx_mce_check_error+0x17/0x20 [skx_edac_common]\n  ...\n\nThe issue arose was because the variable 'adxl_component_count' (inside\nskx_edac_common), which counts the ADXL components, was not reset. During\nthe reloading of i10nm_edac, the count was incremented by the actual number\nof ADXL components again, resulting in a count that was double the real\nnumber of ADXL components. This led to an out-of-bounds reference to the\nADXL component array, causing the general protection fault above.\n\nFix this issue by resetting the 'adxl_component_count' in adxl_put(),\nwhich is called during the unloading of {skx,i10nm}_edac.",
  "Severity": "UNKNOWN",
  "Score": 0.0
}